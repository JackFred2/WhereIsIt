plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = "${project.archives_base_name}-${project.minecraft_version}"
}

repositories {
	repositories {
		maven {
			name = 'ParchmentMC'
			url = 'https://maven.parchmentmc.org'
			content {
				includeGroup("org.parchmentmc.data")
			}
		}
		maven {
			name = "TerraformersMC"
			url = "https://maven.terraformersmc.com/releases/"
			content {
				includeGroup("com.terraformersmc")
				includeGroup("dev.emi")
			}
		}
		maven {
			// JEI
			name = "Jared"
			url = "https://maven.blamejared.com/"
			content {
				includeGroup("mezz.jei")
			}
		}
		maven {
			name = "Shedaniel"
			url = "https://maven.shedaniel.me"
			content {
				includeGroupByRegex("me.shedaniel.*")
				includeGroup("dev.architectury")
			}
		}
		maven {
			name = 'Xander Maven'
			url = 'https://maven.isxander.dev/releases'
			content {
				includeGroup("dev.isxander.yacl")
			}
		}
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"
		}
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"whereisit" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath = file("src/main/resources/whereisit.accesswidener")
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	// Config
	modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}"
	implementation "blue.endless:jankson:${project.jankson_version}"

	// COMPATIBILITY

	// ItemStack Grabbers
	// https://github.com/mezz/JustEnoughItems/issues/2891
	// modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	// modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
	modCompileOnlyApi "maven.modrinth:jei:${jei_modrinth_id}"

	// modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"
	// modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"

	//modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
	modCompileOnly "dev.emi:emi-fabric:${emi_version}"

	//modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"
	//modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"
	modLocalRuntime "dev.emi:emi-fabric:${emi_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/JackFred2/WhereIsIt"
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}